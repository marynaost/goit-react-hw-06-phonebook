{"version":3,"sources":["components/Filter/Filter.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss"],"names":["module","exports","actions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContacts","changeFilter","items","createReducer","state","find","contact","toLowerCase","alert","push","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ContactForm","useState","setName","setNumber","dispatch","useDispatch","nameInputId","numberInputId","handleChange","e","target","value","reset","className","s","form","onSubmit","preventDefault","label","htmlFor","input","type","pattern","title","required","onChange","button","getFilter","getFilteredContacts","getContacts","normalizedFilter","includes","ContactList","useSelector","length","noContacts","item","map","list","onClick","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b48fa5b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1Dg_S\",\"input\":\"Filter_input__3s5t3\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContacts = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contact/changeFilter');\r\n\r\nconst actions = { addContact, deleteContacts, changeFilter };\r\n\r\nexport default actions;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    state.find(\r\n      contact => payload.name.toLowerCase() === contact.name.toLowerCase(),\r\n    )\r\n      ? alert(`${payload.name} is alredy in contacts`)\r\n      : state.push({\r\n          id: shortid.generate(),\r\n          name: payload.name,\r\n          number: payload.number,\r\n        });\r\n  },\r\n  [actions.deleteContacts]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.scss';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(actions.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={nameInputId}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          id={nameInputId}\n        />\n      </label>\n      <label className={s.label} htmlFor={numberInputId}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          id={numberInputId}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getFilteredContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport actions from '../../redux/contacts/contacts-actions';\nimport s from './ContactList.module.scss';\n\nfunction ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n  const deleteContacts = id => dispatch(actions.deleteContacts(id));\n  return contacts.length === 0 ? (\n    <div className={s.noContacts}>You haven't contacts!</div>\n  ) : (\n    <ul className={s.item}>\n      {contacts.map(contact => (\n        <li className={s.list} key={contact.id}>\n          <span>\n            {contact.name}: {contact.number}\n          </span>\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => deleteContacts(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport actions from '../../redux/contacts/contacts-actions';\nimport s from './Filter.module.scss';\n\nfunction Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <label className={s.label}>\n        Find contact by name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={value}\n          onChange={e => dispatch(actions.changeFilter(e.target.value))}\n        />\n      </label>\n    </>\n  );\n}\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func,\n// };\n\nexport default Filter;\n","import './App.css';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1oklo\",\"label\":\"ContactForm_label__1o0xp\",\"input\":\"ContactForm_input__3l4gM\",\"button\":\"ContactForm_button__29PYt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__3P-Em\",\"noContacts\":\"ContactList_noContacts__3PpYM\",\"list\":\"ContactList_list__2Qgns\",\"button\":\"ContactList_button__2t-vC\"};"],"sourceRoot":""}